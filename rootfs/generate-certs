#!/bin/bash
clear
#debug
if [ "$DEBUG" == "2" ]; then set -x; fi
if [ "$DEBUG" == "3" ]; then trap read debug; fi

echo "----------------------------"
echo "| OMGWTFSSL Cert Generator |"
echo "----------------------------"

cd /usr/src

export KEY_COUNTRY="${KEY_COUNTRY-"ES"}"
export KEY_PROVINCE="${KEY_PROVINCE-"SEVILLA"}"
export KEY_CITY="${KEY_CITY-"Sevilla"}"
export KEY_ORG="${KEY_ORG-"Pruebas S.A"}"
export KEY_OU="${KEY_OU-"Organizacion de Prueba"}"
export KEY_EMAIL="${KEY_EMAIL-"jandradap@gmail.com"}"
export CA_KEY="${CA_KEY-"ca-key.pem"}"
export CA_CERT="${CA_CERT-"ca.pem"}"
export CA_SUBJECT="${CA_SUBJECT:-"Root CA"}"
export CA_EXPIRE="${CA_EXPIRE:-"100000"}"
SSL_CN=""
if [ ! -z $SSL_SUBJECT ]; then SSL_CN="$SSL_SUBJECT-"; fi
export SSL_SUBJECT="${SSL_SUBJECT:-"test.local"}"
export SSL_CONFIG="${SSL_CONFIG:-"openssl.cnf"}"
export SSL_KEY="${SSL_KEY:-"${SSL_CN}key.pem"}"
export SSL_CSR="${SSL_CSR:-"${SSL_CN}key.csr"}"
export SSL_CERT="${SSL_CERT:-"${SSL_CN}cert.pem"}"
export SSL_SIZE="${SSL_SIZE:-"2048"}"
export SSL_EXPIRE="${SSL_EXPIRE:-"100000"}"
export SSL_DNS="${SSL_DNS}"
export SSL_IP="${SSL_IP}"
export DEBUG="${DEBUG:=0}"

echo "--> Certificate Authority"

if [[ -f /certs/${CA_KEY} ]]; then
    echo -e "\n====> Using existing CA Key ${CA_KEY}"
    CA_KEY="/certs/${CA_KEY}"
else
    echo -e "\n====> Generating new CA key ${CA_KEY}"
    openssl genrsa -out "${CA_KEY}" 2048
fi

if [[ -f /certs/${CA_CERT} ]]; then
    echo -e "\n====> Using existing CA Certificate ${CA_CERT}"
    CA_CERT="/certs/${CA_CERT}"
else
    echo -e "\n====> Generating new CA Certificate ${CA_CERT}"
    #openssl req -x509 -new -nodes -key "${CA_KEY}" -days "${CA_EXPIRE}" -out "${CA_CERT}" -subj "/emailAddress=${KEY_EMAIL}/CN=${CA_SUBJECT}/C=${KEY_COUNTRY}/ST=${KEY_PROVINCE}/L=${KEY_CITY}/O=${KEY_ORG}/OU=${KEY_OU}" || exit 1
    openssl req -x509 -new -newkey rsa:2048 -nodes -key "${CA_KEY}" -days "${CA_EXPIRE}" -out "${CA_CERT}" -subj "/emailAddress=${KEY_EMAIL}/CN=${CA_SUBJECT}/C=${KEY_COUNTRY}/ST=${KEY_PROVINCE}/L=${KEY_CITY}/O=${KEY_ORG}/OU=${KEY_OU}" || exit 1
fi

#[[ -n $DEBUG ]] && cat "$CA_CERT"
if [ "$DEBUG" -ge "1" ]; then cat $CA_CERT; fi

echo "====> Generating new config file ${SSL_CONFIG}"
cat > "${SSL_CONFIG}" <<EOM
[req]
req_extensions = v3_req
distinguished_name = req_distinguished_name
[req_distinguished_name]
[ v3_req ]
basicConstraints = CA:FALSE
keyUsage = nonRepudiation, digitalSignature, keyEncipherment
extendedKeyUsage = clientAuth, serverAuth
EOM

if [[ -n "${SSL_DNS}" || -n "${SSL_IP}" ]]; then
    cat >> "${SSL_CONFIG}" <<EOM
subjectAltName = @alt_names
[alt_names]
EOM

    IFS=","
    dns=("${SSL_DNS}")
    dns+=("${SSL_SUBJECT}")
    for i in "${!dns[@]}"; do
      echo DNS.$((i+1)) = "${dns[$i]}" >> "${SSL_CONFIG}"
    done

    if [[ -n "${SSL_IP}" ]]; then
        ip=("${SSL_IP}")
        for i in "${!ip[@]}"; do
          echo IP.$((i+1)) = "${ip[$i]}" >> "${SSL_CONFIG}"
        done
    fi
fi
if [ "$DEBUG" -ge "1" ]; then cat openssl.cnf; fi

echo -e "\n====> Generating new SSL KEY ${SSL_KEY}"
openssl genrsa -out "${SSL_KEY}" "${SSL_SIZE}"  || exit 1

echo -e "\n====> Generating new SSL CSR ${SSL_CSR}"
openssl req -new -newkey rsa:2048 -key "${SSL_KEY}" \
  -out "${SSL_CSR}" -subj "/emailAddress=${KEY_EMAIL}/CN=${CA_SUBJECT}/C=${KEY_COUNTRY}/ST=${KEY_PROVINCE}/L=${KEY_CITY}/O=${KEY_ORG}/OU=${KEY_OU}" \
  -config ${SSL_CONFIG}  || exit 1

echo -e "\n====> Generating new SSL CERT ${SSL_CERT}"
openssl x509 -req -in "${SSL_CSR}" -CA "${CA_CERT}" -CAkey "${CA_KEY}" -CAcreateserial -out "${SSL_CERT}" \
  -days "${SSL_EXPIRE}" -extensions v3_req -extfile "${SSL_CONFIG}" || exit 1


if [ "$DEBUG" -ge "1" ]; then {
  echo -e "\n\t\t\t\tDEBUG:\n\t\t\t\t=====\n\tCA CERT:\n\t*******\n$(cat $CA_CERT)\n\n\tSSL_KEY:\n\t*******\n$(cat $SSL_KEY)\n\tSSL_CERT:\n\t********\n$(cat $SSL_CERT)\n"
}
fi
echo -e "\n\n\t\t\tSUMMARY:\n\t\t\t======="
echo -e "\n- Certificate created correctly for the host:" $(openssl x509 -in "$SSL_CERT" -text | grep "$SSL_DNS" | sed 's/^[ v]*//')
echo -e "\n- Valid until: " $(openssl x509 -in "$SSL_CERT" -text | grep "Not After" | awk -F ":" '{print$2":"$3":"$4}' | sed 's/^[ v]*//')
echo -e "\n- Verifying certificate $SSL_CERT contra el CA $CA_CERT:" $(openssl verify -verbose -CAfile "$CA_CERT" "$SSL_CERT")
CERT_MD5=$(openssl x509 -noout -modulus -in "$SSL_CERT" | openssl md5)
KEY_MD5=$(openssl rsa  -noout -modulus -in "${SSL_KEY}" | openssl md5)
echo -e "\n- Verifying TLS key:"
if [ "$CERT_MD5" == "$KEY_MD5" ]; then
  echo -e "\n- Verifying TLS key: Private key matches certificate"
else
  echo -e "\n- Verifying TLS key: Private key does not match certificate"
fi

rm openssl.cnf
mv * /certs
if [ "$DEBUG" -ge "1" ]; then ls -lh /certs; fi

export CA_CERT="/certs/ca.pem"
echo -e "\n- Verifying all certificates against the CA $CA_CERT:"
for i  in /certs/*-cert.pem; do
  echo -e "\t - "$(openssl verify -verbose -CAfile "$CA_CERT" "$i")
done

echo -e "\n\n"
